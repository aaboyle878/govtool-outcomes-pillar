name: Build,Backend,Image

on:
  push:
    branches:
    - dev
    - beta
    - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  ENVIRONMENT: ${{ (github.ref_name == 'main' && 'prod-outcomes') || (github.ref_name == 'beta' && 'prod-outcomes') ||  (github.ref_name == 'dev' && 'preview-outcomes') }}

jobs:
  check-build-deploy:
    strategy:
      fail-fast: false
      matrix:
        include:
        - workdir: ./backend
          name: backend
          dockerfile: ./backend/Dockerfile
          image: ghcr.io/${{ github.repository }}-backend
          qovery_container_name: backend

    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set TAG Environment Variable
      id: set_tag
      run: |
        BUILD_NUMBER=${{ github.run_number }}
        if [ "${{ github.ref_name }}" = "main" ]; then
          echo "TAG=${{ github.sha }}-${BUILD_NUMBER}" >> $GITHUB_ENV
        else
          echo "TAG=${{ github.ref_name }}-${{ github.sha }}-${BUILD_NUMBER}" >> $GITHUB_ENV
        fi

    - name: Lint Dockerfile
      id: hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        failure-threshold: error
        format: json
        dockerfile: ${{ matrix.dockerfile }}

    - name: Save Hadolint output
      id: save_hadolint_output
      if: always()
      run: cd ${{ matrix.workdir }} && echo "$HADOLINT_RESULTS" | jq '.' > hadolint_output.json

    - name: Print Dockerfile lint output
      run: |
        cd ${{ matrix.workdir }}
        echo "-----HADOLINT RESULT-----"
        echo "Outcome: ${{ steps.hadolint.outcome }}"
        echo "-----DETAILS--------"
        cat hadolint_output.json
        echo "--------------------"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - id: image_lowercase
      uses: ASzc/change-string-case-action@v6
      with:
        string: ${{ matrix.image }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.workdir }}
        file: ${{ matrix.dockerfile }}
        tags: ${{ steps.image_lowercase.outputs.lowercase }}:${{ env.TAG }}
        load: false
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        outputs: type=docker,dest=/tmp/image-${{ matrix.name }}-${{ env.ENVIRONMENT }}.tar

    - name: Login to GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Scan Docker image with Dockle
      id: dockle
      run: |
        wget -q https://github.com/goodwithtech/dockle/releases/download/v0.4.14/dockle_0.4.14_Linux-64bit.tar.gz
        tar zxf dockle_0.4.14_Linux-64bit.tar.gz
        sudo mv dockle /usr/local/bin

        dockle --exit-code 1 --exit-level fatal --format json --input '/tmp/image-${{ matrix.name }}-${{ env.ENVIRONMENT }}.tar' --output ${{ matrix.workdir }}/dockle_scan_output.json
        cat ${{ matrix.workdir }}/dockle_scan_output.json

        echo "outcome=success" >> $GITHUB_OUTPUT

    - name: Push Docker image to GHCR
      run: |
        docker load -i '/tmp/image-${{ matrix.name }}-${{ env.ENVIRONMENT }}.tar'
        rm -rf '/tmp/image-${{ matrix.name }}-${{ env.ENVIRONMENT }}.tar'
        docker push ${{ steps.image_lowercase.outputs.lowercase }}:${{ env.TAG }}
